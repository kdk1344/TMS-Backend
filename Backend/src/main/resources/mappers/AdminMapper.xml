<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- user-mapper.xml -->
<mapper namespace="com.tms.backend.mapper.AdminMapper">
    <insert id="insert" parameterType="User">
		INSERT INTO users (USER_ID, USER_NAME, PASSWORD, AUTHORITY_CODE, AUTHORITY_NAME)
		VALUES(#{userID}, #{userName}, #{password}, 
		CASE 
            WHEN #{authorityName} = '관리자' THEN 1
            WHEN #{authorityName} = 'PM,사업/품질' THEN 2
            WHEN #{authorityName} = '테스트관리자' THEN 3
            WHEN #{authorityName} = 'PL' THEN 4
            WHEN #{authorityName} = '개발자' THEN 5
            WHEN #{authorityName} = '테스터' THEN 6
            WHEN #{authorityName} = '고객 IT 담당자' THEN 7
            WHEN #{authorityName} = '고객 현업 담당자' THEN 8
        END,
        #{authorityName})
	</insert>
	<insert id="insertUser" parameterType="User">
        INSERT INTO users (USER_ID, USER_NAME, PASSWORD, AUTHORITY_CODE, AUTHORITY_NAME)
        VALUES (#{userID}, #{userName}, #{password},#{authorityCode}, #{authorityName})
    </insert>
    
    <update id="updateUser" parameterType="User">
        UPDATE users
        SET USER_NAME = #{userName},
            PASSWORD = #{password},
            AUTHORITY_NAME = #{authorityName},
            AUTHORITY_CODE = CASE 
                          WHEN #{authorityName} = '관리자' THEN 1
			              WHEN #{authorityName} = 'PM,사업/품질' THEN 2
			              WHEN #{authorityName} = '테스트관리자' THEN 3
			              WHEN #{authorityName} = 'PL' THEN 4
			              WHEN #{authorityName} = '개발자' THEN 5
			              WHEN #{authorityName} = '테스터' THEN 6
			              WHEN #{authorityName} = '고객 IT 담당자' THEN 7
			              WHEN #{authorityName} = '고객 현업 담당자' THEN 8
                      END
        WHERE User_ID = #{userID}
    </update>
    
    <delete id="deleteUser" parameterType="String">
        DELETE FROM Users
        WHERE USER_ID IN
        <foreach item="id" index="index" collection="array"
                 open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
    <select id="findAll" resultType="User" parameterType="Criteria">
        SELECT USER_ID as userId, USER_NAME as userName, AUTHORITY_NAME as authorityName
        FROM users
        WHERE 1=1
        <if test="userName != null and userName != ''">
            AND USER_NAME LIKE CONCAT('%', #{userName}, '%')
        </if>
        <if test="authorityName != null and authorityName != ''">
            AND AUTHORITY_NAME = #{authorityName}
        </if>
        ORDER BY USER_ID
        LIMIT #{pageStart}, #{perPageNum}
    </select>

    <select id="countUsers" resultType="int">
        SELECT COUNT(*)
        FROM Users
        WHERE 1=1
        <if test="userName != null and userName != ''">
            AND USER_NAME LIKE CONCAT('%', #{userName}, '%')
        </if>
        <if test="authorityName != null and authorityName != ''">
            AND AUTHORITY_NAME = #{authorityName}
        </if>
    </select>
    
    <select id="findDevlopers" resultType="User">
    	SELECT * FROM Users
		WHERE 1=1
        <if test="authorityName != null and authorityName != ''">
            AND AUTHORITY_NAME = '개발자'
        </if>
    </select>
 
 
	
	
	<!-- 공지사항 mapper.xml-->
	
    <resultMap id="NoticeResultMap" type="Notice">
        <id column="SEQ" property="seq"/>
        <result column="POST_DATE" property="postDate"/>
        <result column="TITLE" property="title"/>
        <result column="CONTENT" property="content"/>
        <result column="CREATED_DATE" property="createdDate"/>
        <result column="LAST_MODIFIED_DATE" property="lastModifiedDate"/>
        <collection property="attachments" ofType="FA" resultMap="FileAttachmentResultMap"/>
    </resultMap>
    
    <resultMap id="FileAttachmentResultMap" type="FA">
        <id column="IDENTIFIER" property="identifier"/>
        <result column="TYPE" property="type"/>
        <result column="STORAGE_LOCATION" property="storageLocation"/>
        <result column="FILE_NAME" property="fileName"/>
        <result column="CREATED_DATE" property="createdDate"/>
    </resultMap>

    <select id="searchNotices" parameterType="map" resultMap="NoticeResultMap">
        SELECT n.*, a.*
        FROM notices n
        LEFT JOIN file_attachments a ON n.SEQ = a.SEQ
        WHERE 1=1
         <!-- 시작일과 종료일에 따른 POST_DATE 범위 검색 -->
        <if test="startDate != null and startDate != ''">
            AND n.POST_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND n.POST_DATE &lt;= #{endDate}
        </if>
        <if test="title != null and title != ''">
            AND n.TITLE LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="content != null and content != ''">
            AND n.CONTENT LIKE CONCAT('%', #{content}, '%')
        </if>
        ORDER BY n.CREATED_DATE DESC, n.SEQ DESC
        LIMIT #{offset}, #{size}
    </select>

    <select id="getAttachmentsByNoticeSEQ" resultMap="FileAttachmentResultMap">
	    SELECT SEQ, IDENTIFIER, TYPE, STORAGE_LOCATION, FILE_NAME, CREATED_DATE
	    FROM file_attachments
	    WHERE SEQ = #{seq}
	</select>

    <select id="getTotalNoticesCount" resultType="int">
        SELECT COUNT(*) FROM notices
        WHERE 1=1
        <!-- 시작일과 종료일에 따른 POST_DATE 범위 검색 -->
        <if test="startDate != null and startDate != ''">
            AND POST_DATE &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND POST_DATE &lt;= #{endDate}
        </if>
        <if test="title != null and title != ''">
            AND TITLE LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="content != null and content != ''">
            AND CONTENT LIKE CONCAT('%', #{content}, '%')
        </if>
    </select>
    
    <select id="getLatestNotice" resultMap="NoticeResultMap">
	    SELECT *
	    FROM notices
	    ORDER BY CREATED_DATE DESC
	    LIMIT 1
	</select>
    
    <insert id="insertNotice" useGeneratedKeys="true" keyProperty="seq">
        INSERT INTO notices (POST_DATE, TITLE, CONTENT)
        VALUES (#{postDate}, #{title}, #{content})
    </insert>

    <insert id="insertAttachment">
        INSERT INTO file_attachments (IDENTIFIER, TYPE, STORAGE_LOCATION, FILE_NAME)
        VALUES (#{identifier}, #{type}, #{storageLocation}, #{fileName})
    </insert>
    
    <!-- 특정 공지사항 조회 -->
    <select id="getNoticeById" resultType="Notice">
        SELECT SEQ, POST_DATE as postDate, TITLE, CONTENT, CREATED_DATE as createdDate, LAST_MODIFIED_DATE as lastModifiedDate
        FROM notices
        WHERE SEQ = #{seq}
    </select>

    <!-- 공지사항 정보 수정 -->
    <update id="updateNotice">
        UPDATE notices
        SET POST_DATE = #{postDate},
            TITLE = #{title},
            CONTENT = #{content},
            LAST_MODIFIED_DATE = NOW()
        WHERE SEQ = #{seq}
    </update>
    
    <!-- 특정 공지사항의 첨부파일 삭제 -->
    <delete id="deleteAttachmentsByNoticeId">
        DELETE FROM file_attachments WHERE IDENTIFIER = #{seq}
    </delete>
    
    <select id="getAttachmentsByNoticeId" resultType="FA">
        SELECT SEQ, IDENTIFIER, TYPE, STORAGE_LOCATION as storageLocation, FILE_NAME as filename, CREATED_DATE as createdDate
        FROM file_attachments
        WHERE IDENTIFIER = #{seq}
    </select>
    
    <!-- 특정 첨부파일 조회 -->
    <select id="getAttachmentById" resultType="FA">
        SELECT SEQ, IDENTIFIER, TYPE, STORAGE_LOCATION as storageLocation, FILE_NAME as filename, CREATED_DATE as createdDate
        FROM file_attachments
        WHERE SEQ = #{seq}
    </select>
    
    <!-- 공지사항 삭제 -->
    <delete id="deleteNotice">
        DELETE FROM notices WHERE SEQ = #{seq}
    </delete>
    
    
    
    
    
    <!-- 공통코드 mapper.xml-->
	
	<select id="searchCommonCodes" parameterType="map" resultType="CommonCode">
        SELECT Parent_Code as parentCode, Code, Code_Name as codeName
        FROM common_codes
        WHERE 1=1
        <if test="parentCode != null and parentCode != ''">
            AND Parent_Code = #{parentCode}
        </if>
        <if test="code != null and code != ''">
            AND Code = #{code}
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
        LIMIT #{offset}, #{size}
    </select>
    
    <select id="searchParentCodeName" resultType="String">
        SELECT DISTINCT Code_Name as parentCodeName
        FROM common_codes 
        WHERE CODE = #{parentCode} AND Parent_Code = '00'
    </select>
   
    <select id="getTotalCommonCodeCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM common_codes
        WHERE 1=1
        <if test="parentCode != null and parentCode != ''">
            AND Parent_Code = #{parentCode}
        </if>
        <if test="code != null and code != ''">
            AND Code = #{code}
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
    </select>
    
    <!-- 전체 공통코드 조회 -->
    <select id="getAllCommonCodes" resultType="CommonCode">
        SELECT Parent_Code as parentCode, Code, Code_Name as codeName
        FROM common_codes
    </select>
    
    <!-- 필터링된 공통코드 조회 -->
    <select id="getFilteredCommonCodes" resultType="CommonCode">
        SELECT Parent_Code as parentCode, Code, Code_Name as codeName
        FROM common_codes
        WHERE 1=1
        <if test="parentCode != null and parentCode != ''">
            AND Parent_Code = #{parentCode}
        </if>
        <if test="code != null and code != ''">
            AND Code = #{code}
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
    </select>
    
    <insert id="insertCommonCode" parameterType="CommonCode">
	    INSERT INTO common_codes (Parent_Code, Code, Code_Name)
	    VALUES (#{parentCode}, #{code}, #{codeName})
	</insert>
	
	<update id="updateCommonCode" parameterType="CommonCode">
	    UPDATE common_codes
	    SET Code_Name = #{codeName}
	    WHERE Parent_Code = #{parentCode} AND Code = #{code}
	</update>
	
	<delete id="deleteCommonCode" parameterType="String">
		DELETE FROM common_codes WHERE CONCAT(Parent_Code, Code) = #{seq}
	</delete>
	
	<!-- 대분류 코드만 가져오기 -->
    <select id="getParentCommonCodes" resultType="CommonCode">
        SELECT CODE, Code_Name as CodeName
        FROM common_codes 
        WHERE PARENT_CODE = '00'
    </select>
    
    <!-- 상위 코드에 따른 하위 코드 목록을 조회하는 쿼리 -->
    <select id="findSubCodesByParentCode" resultType="CommonCode" parameterType="string">
        SELECT Code, Code_Name as CodeName
        FROM common_codes
        WHERE parent_code = #{parentCode}
    </select>
    
    
	
	
	
	<!-- 분류코드 mapper.xml -->
	
	<!-- 카테고리 코드 추가 -->
    <insert id="insertCategoryCode">
        INSERT INTO category_codes (Stage_Type, Code, Code_Name)
        VALUES (#{stageType}, #{code}, #{codeName})
    </insert>
    
    <!-- 상위 대분류 코드 가져오기 -->
    <select id="getParentCode" parameterType="String" resultType="String">
        SELECT Code
        FROM category_codes
        WHERE Stage_Type = '대' AND Code = #{parentCode}
    </select>

    <!-- 카테고리 코드 수정 -->
    <update id="updateCategoryCode">
        UPDATE category_codes
        SET Stage_Type = #{stageType}, Code_Name = #{codeName}
        WHERE Code = #{code}
    </update>

    <!-- 카테고리 코드 삭제 -->
    <delete id="deleteCategoryCodes">
    	DELETE FROM category_codes WHERE Code = #{code}
    </delete>

    <!-- 카테고리 코드 검색 및 페이징 조회 -->
    <select id="searchCategoryCodes" resultType="categoryCode">
        SELECT Stage_Type as StageType, Code, Code_Name as CodeName
        FROM category_codes
        WHERE 1=1
        <if test="stageType != null and stageType != ''">
            AND Stage_Type = #{stageType}
        </if>
        <if test="code != null and code != ''">
            AND Code LIKE CONCAT('%', #{code}, '%')
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
        LIMIT #{offset}, #{size}
    </select>

    <!-- 총 카테고리 코드 수 조회 -->
    <select id="getTotalCategoryCodeCount" resultType="int">
        SELECT COUNT(*)
        FROM category_codes
        WHERE 1=1
        <if test="stageType != null and stageType != ''">
            AND Stage_Type = #{stageType}
        </if>
        <if test="code != null and code != ''">
            AND Code LIKE CONCAT('%', #{code}, '%')
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
    </select>

    <!-- 모든 카테고리 코드 가져오기 -->
    <select id="getAllCategoryCodes" resultType="categoryCode">
        SELECT Stage_Type as StageType, Code, Code_Name as CodeName
        FROM category_codes
    </select>

    <!-- 필터링된 카테고리 코드 가져오기 -->
    <select id="getFilteredCategoryCodes" resultType="categoryCode">
        SELECT Stage_Type as StageType, Code, Code_Name as CodeName
        FROM category_codes
        WHERE 1=1
        <if test="stageType != null and stageType != ''">
            AND Stage_Type = #{stageType}
        </if>
        <if test="code != null and code != ''">
            AND Code LIKE CONCAT('%', #{code}, '%')
        </if>
        <if test="codeName != null and codeName != ''">
            AND Code_Name LIKE CONCAT('%', #{codeName}, '%')
        </if>
    </select>
    
    <!-- 대분류 코드만 가져오기 -->
    <select id="getParentCategoryCodes" resultType="categoryCode">
        SELECT CODE, Code_Name as CodeName
        FROM category_codes 
        WHERE Stage_Type = '대'
    </select>
    
      <!-- 상위 코드에 따른 하위 코드 목록을 조회하는 쿼리 -->
    <select id="findMiddleCodesByParentCode" resultType="categoryCode" parameterType="string">
        SELECT Code, Code_Name as CodeName
        FROM category_codes 
        WHERE parent_code = #{parentCode}
    </select>

	
</mapper>